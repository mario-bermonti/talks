---
title: "Script presenting the final script that will be produced during the workshop split into more pedagogical steps"
format: 
    html:
        df-print: kable
---

## Setup

Here we will load the libraries we will use to facilitate preparing and  analyzing the data.

```{r}
library(tidyverse)
library(broom)
library(easystats)
library(effectsize)
```

## Read data

Let's read the data from an URL (online) using the tidyverse function `read_csv`.

```{r}
data <- read_csv("https://raw.githubusercontent.com/mario-bermonti/talks/refs/heads/intro_r/intro_r_cognition/data.csv")
```

## Inspect the data

The first step when we get data is to inspect it to understand its structure and content.

### First few rows

```{r}
head(data)
```

### Number of rows and columns

```{r}
dim(data)
```

### Variable types

```{r}
str(data)
```

## Effect of MDD on digit span forward

We will examine the effect of Major Depressive Disorder (MDD) on the digit span forward task.

We will begin by visualizing the data, then we will calculate descriptive statistics, and finally, we will perform inferential statistics.

### Viz
#### Box plot

We will start by creating a box plot to visualize the data.

We will use `ggplot2` to create the plot. This is one of the most popular packages for data visualization in R.

Plots with `ggplot2` are built in layers, where each layer adds elements on top of the previous one. We add these layers using  `+`, which is great it is an intuitive math operation.

Let's build the first layer: Blank canvas

```{r}
ggplot() 
```

Now, let's add the data to the plot.

```{r}
ggplot(
    data,
) 
```

Now, let's specify the `x` and `y` variables. We will display the `depression status`
(grouping variable) on the `X` axis and the score on the `digit_span_forward` task on the `Y` axis.

```{r}
ggplot(
    data,
    aes(x = group, y = digit_span_forward)
)
```

Now, let's add the actual box plot to the plot.

```{r}
ggplot(
    data,
    aes(x = group, y = digit_span_forward)
) +
geom_boxplot()
```

#### Bar plot

Bar plots are a little bit different and require us to calculate the mean before plotting.

Let's calculate the means we will plot.

```{r}
data |>
    summarise(
        mean_dsf = mean(digit_span_forward),
        mean_dsb = mean(digit_span_backward)
    )
```

Notice that we are now using a `|>` symbol. This is a convenient way to perform multiple sequential operations on data since you "chain" these operations with `|>` (pipe operator). You should read it as:

"do operation `1`"

"and then (`|>`)"

"do operation `2`"

If you think about it is a natural way to express the steps below:

- take the data
- and then group it by the `group` variable
- and then calculate the mean of the `digit_span_forward` variable
- and then calculate the mean of the `digit_span_backward` variable

Let's calculate the general means.

Let's calculate the means by group now.

```{r}
means <- data |>
    group_by(group) |>
    summarise(
        mean_dsf = mean(digit_span_forward),
        mean_dsb = mean(digit_span_backward)
    )

means
```

Now, let's build the bar plot. Remember we build it in layers. 

```{r}
ggplot(
    data = means,
    aes(x = group, y = mean_dsf)
) + 
geom_bar(stat = "identity")
```

The `stat = "identity"` bit is a little weird, but it just tells R to plot the values as they 
are, without any transformation.

#### Violin plot

One great thing about R is that it can create all sort of beautiful and informative plots.

Violin and dot plots are great ways to visualize the distribution of the data. We will combine them 
into a single plot by combining `ggplot2` and `easystats`'s `see` package.

```{r}
ggplot(
    data,
    aes(x = group, y = digit_span_forward)
) + 
geom_violindot()
```

**Highlight the pattern when creating plots.**

```{}
canvas(
    data,
    aes() # aesthetics
) +
plot_type()
```

### Descriptive stats

As we know, summarizing the data is a crucial step in data analysis. It helps us understand the data by identifying patterns, checking for errors, and assumptions. 

Let's calculate the mean, standard deviation, minimum, and maximum of the `digit_span_forward` variable.

This is easily achieved in R using `tidyverse`'s `summarise` function.

#### General

Let's first summarize the data without considering the groups.

```{r}
data |>
    summarise(
        mean_dsf = mean(digit_span_forward),
        sd_dsf = sd(digit_span_forward),
        min_dsf = min(digit_span_forward),
        max_dsf = max(digit_span_forward)
    )
```

#### By group

Now, let's summarize the data for each group to allow group comparisons.

```{r}
data |>
    group_by(group) |>
    summarise(
        mean_dsf = mean(digit_span_forward),
        sd_dsf = sd(digit_span_forward),
        min_dsf = min(digit_span_forward),
        max_dsf = max(digit_span_forward)
    )
```

### Inferential

Now that we understand the data better, we can perform inferential statistics to test if the differences we observed are statistically significant.

We will use a t-test because we are comparing the means of two groups.

R provides the `t.test` function which performs a t-test. Be mindful about the formula syntax 
used to specify the predictor and outcome.

#### Basic t-test

```{r}
results_ttest <- t.test(
    digit_span_forward ~ group,
    data = data
)

results_ttest
```

Let's format the results as a nice table.

```{r}
tidy(results_ttest)   
```


**Formula syntax**

This syntax is used by most analysis functions in R and is pretty straightforward once you get used to it.

You just specify the outcome variable, followed by a `~`, and then the predictor variable. You should read it as:

- `outcome`
- "predicted by"
- `predictor`

```{}
test(
    outcome ~ predictor,
    data = data
)
```

#### Standardized effect size

Let's also calculate the standardized effect size, Hedges' g, to understand the magnitude of the effect.

Again, notice the formula syntax used to specify the predictor and outcome.

```{r}
hedges_g(
  data = data,
  digit_span_forward ~ group
)
```

## Effect of MDD on digit span backward

Let's now complete a second exercise but focusing this time on the digit span backward task. 

You will not find extensive descriptions because the code is mostly the same, except for the variable names.

### Viz
#### Box plot

```{r}
ggplot(
    data,
    aes(x = group, y = digit_span_backward)
) +
geom_boxplot()
```

#### Bar plot

Let's calculate the means we will plot

```{r}
means <- data |>
    group_by(group) |>
    summarise(
        mean_dsb = mean(digit_span_backward),
        mean_dsb = mean(digit_span_backward)
    )

means
```

Let's build the visualization

```{r}
ggplot(
    data = means,
    aes(x = group, y = mean_dsb)
) + 
geom_bar(stat = "identity")
```

#### Violin plot

```{r}
ggplot(
    data,
    aes(x = group, y = digit_span_backward)
) + 
geom_violindot()
```

### Descriptive stats
#### General

```{r}
data |>
    summarise(
        mean_dsb = mean(digit_span_backward),
        sd_dsb = sd(digit_span_backward),
        min_dsb = min(digit_span_backward),
        max_dsb = max(digit_span_backward)
    )
```

#### By group

```{r}
data |>
    group_by(group) |>
    summarise(
        mean_dsb = mean(digit_span_backward),
        sd_dsb = sd(digit_span_backward),
        min_dsb = min(digit_span_backward),
        max_dsb = max(digit_span_backward)
    )
```

### Inferential

```{r}
results_ttest <- t.test(
    digit_span_backward ~ group,
    data = data
)

tidy(results_ttest)   
```

```{r}
hedges_g(
  data = data,
  digit_span_backward ~ group
)
```