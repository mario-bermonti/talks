{
  "hash": "b63b94aee085afb4cf94081ac2f5fb53",
  "result": {
    "markdown": "---\ntitle: \"Script presenting the final script that will be produced during the workshop split into more pedagogical steps\"\nformat: \n    html:\n        df-print: kable\n---\n\n\n## Setup\n\nHere we will load the libraries we will use to facilitate preparing and  analyzing the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.2     ✔ purrr   1.0.2\n✔ tibble  3.2.1     ✔ dplyr   1.1.1\n✔ tidyr   1.2.0     ✔ stringr 1.4.1\n✔ readr   2.1.2     ✔ forcats 1.0.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(broom)\nlibrary(easystats)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n# Attaching packages: easystats 0.6.0 (red = needs update)\n✖ bayestestR  0.13.1   ✖ correlation 0.8.4 \n✖ datawizard  0.8.0    ✖ effectsize  0.8.3 \n✖ insight     0.19.7   ✖ modelbased  0.8.6 \n✖ performance 0.10.4   ✖ parameters  0.21.1\n✖ report      0.5.7    ✖ see         0.8.0 \n\nRestart the R-Session and update packages in red with `easystats::easystats_update()`.\n```\n:::\n\n```{.r .cell-code}\nlibrary(effectsize)\n```\n:::\n\n\n## Read data\n\nLet's read the data from an URL (online) using the tidyverse function `read_csv`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- read_csv(\"https://raw.githubusercontent.com/mario-bermonti/talks/refs/heads/main/intro_r_cognition/data.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 100 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): id, group\ndbl (2): digit_span_forward, digit_span_backward\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n## Inspect the data\n\nThe first step when we get data is to inspect it to understand its structure and content.\n\n### First few rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(data)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|id   |group   | digit_span_forward| digit_span_backward|\n|:----|:-------|------------------:|-------------------:|\n|S001 |healthy |                  5|                   6|\n|S002 |healthy |                  4|                   4|\n|S003 |healthy |                  8|                   5|\n|S004 |healthy |                  2|                   4|\n|S005 |healthy |                  8|                   5|\n|S006 |healthy |                  5|                   5|\n\n</div>\n:::\n:::\n\n\n### Number of rows and columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 100   4\n```\n:::\n:::\n\n\n### Variable types\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [100 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ id                 : chr [1:100] \"S001\" \"S002\" \"S003\" \"S004\" ...\n $ group              : chr [1:100] \"healthy\" \"healthy\" \"healthy\" \"healthy\" ...\n $ digit_span_forward : num [1:100] 5 4 8 2 8 5 7 6 9 6 ...\n $ digit_span_backward: num [1:100] 6 4 5 4 5 5 5 2 7 5 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   id = col_character(),\n  ..   group = col_character(),\n  ..   digit_span_forward = col_double(),\n  ..   digit_span_backward = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\n## Effect of MDD on digit span forward\n\nWe will examine the effect of Major Depressive Disorder (MDD) on the digit span forward task.\n\nWe will begin by visualizing the data, then we will calculate descriptive statistics, and finally, we will perform inferential statistics.\n\n### Viz\n#### Box plot\n\nWe will start by creating a box plot to visualize the data.\n\nWe will use `ggplot2` to create the plot. This is one of the most popular packages for data visualization in R.\n\nPlots with `ggplot2` are built in layers, where each layer adds elements on top of the previous one. We add these layers using  `+`, which is great it is an intuitive math operation.\n\nLet's build the first layer: Blank canvas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() \n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nNow, let's add the data to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n) \n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nNow, let's specify the `x` and `y` variables. We will display the `depression status`\n(grouping variable) on the `X` axis and the score on the `digit_span_forward` task on the `Y` axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n    aes(x = group, y = digit_span_forward)\n)\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nNow, let's add the actual box plot to the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n    aes(x = group, y = digit_span_forward)\n) +\ngeom_boxplot()\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n#### Bar plot\n\nBar plots are a little bit different and require us to calculate the mean before plotting.\n\nLet's calculate the means we will plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    summarise(\n        mean_dsf = mean(digit_span_forward),\n        mean_dsb = mean(digit_span_backward)\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| mean_dsf| mean_dsb|\n|--------:|--------:|\n|     5.33|     4.81|\n\n</div>\n:::\n:::\n\n\nNotice that we are now using a `|>` symbol. This is a convenient way to perform multiple sequential operations on data since you \"chain\" these operations with `|>` (pipe operator). You should read it as:\n\n\"do operation `1`\"\n\n\"and then (`|>`)\"\n\n\"do operation `2`\"\n\nIf you think about it is a natural way to express the steps below:\n\n- take the data\n- and then group it by the `group` variable\n- and then calculate the mean of the `digit_span_forward` variable\n- and then calculate the mean of the `digit_span_backward` variable\n\nLet's calculate the general means.\n\nLet's calculate the means by group now.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- data |>\n    group_by(group) |>\n    summarise(\n        mean_dsf = mean(digit_span_forward),\n        mean_dsb = mean(digit_span_backward)\n    )\n\nmeans\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group      | mean_dsf| mean_dsb|\n|:----------|--------:|--------:|\n|depression |     4.88|     4.22|\n|healthy    |     5.78|     5.40|\n\n</div>\n:::\n:::\n\n\nNow, let's build the bar plot. Remember we build it in layers. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = means,\n    aes(x = group, y = mean_dsf)\n) + \ngeom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nThe `stat = \"identity\"` bit is a little weird, but it just tells R to plot the values as they \nare, without any transformation.\n\n#### Violin plot\n\nOne great thing about R is that it can create all sort of beautiful and informative plots.\n\nViolin and dot plots are great ways to visualize the distribution of the data. We will combine them \ninto a single plot by combining `ggplot2` and `easystats`'s `see` package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n    aes(x = group, y = digit_span_forward)\n) + \ngeom_violindot()\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n**Highlight the pattern when creating plots.**\n\n```{}\ncanvas(\n    data,\n    aes() # aesthetics\n) +\nplot_type()\n```\n\n### Descriptive stats\n\nAs we know, summarizing the data is a crucial step in data analysis. It helps us understand the data by identifying patterns, checking for errors, and assumptions. \n\nLet's calculate the mean, standard deviation, minimum, and maximum of the `digit_span_forward` variable.\n\nThis is easily achieved in R using `tidyverse`'s `summarise` function.\n\n#### General\n\nLet's first summarize the data without considering the groups.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    summarise(\n        mean_dsf = mean(digit_span_forward),\n        sd_dsf = sd(digit_span_forward),\n        min_dsf = min(digit_span_forward),\n        max_dsf = max(digit_span_forward)\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| mean_dsf|  sd_dsf| min_dsf| max_dsf|\n|--------:|-------:|-------:|-------:|\n|     5.33| 1.98507|       2|      10|\n\n</div>\n:::\n:::\n\n\n#### By group\n\nNow, let's summarize the data for each group to allow group comparisons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    group_by(group) |>\n    summarise(\n        mean_dsf = mean(digit_span_forward),\n        sd_dsf = sd(digit_span_forward),\n        min_dsf = min(digit_span_forward),\n        max_dsf = max(digit_span_forward)\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group      | mean_dsf|   sd_dsf| min_dsf| max_dsf|\n|:----------|--------:|--------:|-------:|-------:|\n|depression |     4.88| 1.814229|       2|       9|\n|healthy    |     5.78| 2.063186|       2|      10|\n\n</div>\n:::\n:::\n\n\n### Inferential\n\nNow that we understand the data better, we can perform inferential statistics to test if the differences we observed are statistically significant.\n\nWe will use a t-test because we are comparing the means of two groups.\n\nR provides the `t.test` function which performs a t-test. Be mindful about the formula syntax \nused to specify the predictor and outcome.\n\n#### Basic t-test\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_ttest <- t.test(\n    digit_span_forward ~ group,\n    data = data\n)\n\nresults_ttest\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tWelch Two Sample t-test\n\ndata:  digit_span_forward by group\nt = -2.3164, df = 96.423, p-value = 0.02266\nalternative hypothesis: true difference in means between group depression and group healthy is not equal to 0\n95 percent confidence interval:\n -1.6712025 -0.1287975\nsample estimates:\nmean in group depression    mean in group healthy \n                    4.88                     5.78 \n```\n:::\n:::\n\n\nLet's format the results as a nice table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntidy(results_ttest)   \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| estimate| estimate1| estimate2| statistic|  p.value| parameter|  conf.low|  conf.high|method                  |alternative |\n|--------:|---------:|---------:|---------:|--------:|---------:|---------:|----------:|:-----------------------|:-----------|\n|     -0.9|      4.88|      5.78| -2.316364| 0.022656|  96.42301| -1.671202| -0.1287975|Welch Two Sample t-test |two.sided   |\n\n</div>\n:::\n:::\n\n\n\n**Formula syntax**\n\nThis syntax is used by most analysis functions in R and is pretty straightforward once you get used to it.\n\nYou just specify the outcome variable, followed by a `~`, and then the predictor variable. You should read it as:\n\n- `outcome`\n- \"predicted by\"\n- `predictor`\n\n```{}\ntest(\n    outcome ~ predictor,\n    data = data\n)\n```\n\n#### Standardized effect size\n\nLet's also calculate the standardized effect size, Hedges' g, to understand the magnitude of the effect.\n\nAgain, notice the formula syntax used to specify the predictor and outcome.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhedges_g(\n  data = data,\n  digit_span_forward ~ group\n)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   Hedges_g|   CI|     CI_low|    CI_high|\n|----------:|----:|----------:|----------:|\n| -0.4597168| 0.95| -0.8528339| -0.0643165|\n\n</div>\n:::\n:::\n\n\n## Effect of MDD on digit span backward\n\nLet's now complete a second exercise but focusing this time on the digit span backward task. \n\nYou will not find extensive descriptions because the code is mostly the same, except for the variable names.\n\n### Viz\n#### Box plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n    aes(x = group, y = digit_span_backward)\n) +\ngeom_boxplot()\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n#### Bar plot\n\nLet's calculate the means we will plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- data |>\n    group_by(group) |>\n    summarise(\n        mean_dsb = mean(digit_span_backward),\n        mean_dsb = mean(digit_span_backward)\n    )\n\nmeans\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group      | mean_dsb|\n|:----------|--------:|\n|depression |     4.22|\n|healthy    |     5.40|\n\n</div>\n:::\n:::\n\n\nLet's build the visualization\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data = means,\n    aes(x = group, y = mean_dsb)\n) + \ngeom_bar(stat = \"identity\")\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n#### Violin plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n    data,\n    aes(x = group, y = digit_span_backward)\n) + \ngeom_violindot()\n```\n\n::: {.cell-output-display}\n![](workshop_steps_script_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n### Descriptive stats\n#### General\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    summarise(\n        mean_dsb = mean(digit_span_backward),\n        sd_dsb = sd(digit_span_backward),\n        min_dsb = min(digit_span_backward),\n        max_dsb = max(digit_span_backward)\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| mean_dsb|   sd_dsb| min_dsb| max_dsb|\n|--------:|--------:|-------:|-------:|\n|     4.81| 1.567956|       2|       9|\n\n</div>\n:::\n:::\n\n\n#### By group\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata |>\n    group_by(group) |>\n    summarise(\n        mean_dsb = mean(digit_span_backward),\n        sd_dsb = sd(digit_span_backward),\n        min_dsb = min(digit_span_backward),\n        max_dsb = max(digit_span_backward)\n    )\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|group      | mean_dsb|   sd_dsb| min_dsb| max_dsb|\n|:----------|--------:|--------:|-------:|-------:|\n|depression |     4.22| 1.374550|       2|       7|\n|healthy    |     5.40| 1.538618|       2|       9|\n\n</div>\n:::\n:::\n\n\n### Inferential\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresults_ttest <- t.test(\n    digit_span_backward ~ group,\n    data = data\n)\n\ntidy(results_ttest)   \n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| estimate| estimate1| estimate2| statistic|   p.value| parameter|  conf.low|  conf.high|method                  |alternative |\n|--------:|---------:|---------:|---------:|---------:|---------:|---------:|----------:|:-----------------------|:-----------|\n|    -1.18|      4.22|       5.4| -4.044164| 0.0001056|  96.77985| -1.759116| -0.6008838|Welch Two Sample t-test |two.sided   |\n\n</div>\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhedges_g(\n  data = data,\n  digit_span_backward ~ group\n)\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|   Hedges_g|   CI|    CI_low|   CI_high|\n|----------:|----:|---------:|---------:|\n| -0.8026242| 0.95| -1.205577| -0.395881|\n\n</div>\n:::\n:::",
    "supporting": [
      "workshop_steps_script_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}